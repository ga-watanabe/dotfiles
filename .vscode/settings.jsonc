{
  // When enabled, the diff editor ignores changes in leading or trailing whitespace.
  "diffEditor.ignoreTrimWhitespace": false,

  // Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
  //  - none: The editor will not insert indentation automatically.
  //  - keep: The editor will keep the current line's indentation.
  //  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
  //  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
  //  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
  "editor.autoIndent": "full",

  // Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
  "editor.detectIndentation": false,

  // Controls whether the minimap is shown.
  "editor.minimap.enabled": false,

  // Controls how the editor should render whitespace characters.
  //  - none
  //  - boundary: Render whitespace characters except for single spaces between words.
  //  - selection: Render whitespace characters only on selected text.
  //  - all
  "editor.renderWhitespace": "all",

  // Controls which editor is shown at startup, if none are restored from the previous session.
  //  - none: Start without an editor.
  //  - welcomePage: Open the Welcome page (default).
  //  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise.
  //  - newUntitledFile: Open a new untitled file (only applies when opening an empty workspace).
  //  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
  "workbench.startupEditor": "newUntitledFile",

  // Configure glob patterns for excluding files and folders. For example, the file Explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude` setting to define search specific excludes. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
  "files.exclude": {
    "**/.git": false
  },

  // When enabled, insert a final new line at the end of the file when saving it.
  "files.insertFinalNewline": true,

  // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
  "files.trimFinalNewlines": true,

  // When enabled, will trim trailing whitespace when saving a file.
  "files.trimTrailingWhitespace": true,

  // Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.
  "explorer.confirmDragAndDrop": false,

  // Controls whether to use `.gitignore` and `.ignore` files when searching for files.
  // "search.useIgnoreFiles": false,

  // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 2,

  // Object mapping regexes to an array of decorations to apply to the capturing groups
  "highlight.regexes": {
    "(　)": [{ "backgroundColor": "lightgray" }],
    "([０-９Ａ-Ｚ＝])": [{ "color": "red", "backgroundColor": "yellow" }]
  },

  //
  "macros": {
    "saveAndFocusTerminal": [
      "workbench.action.files.save",
      "workbench.action.terminal.focus"
    ]
  },

  // Filepath to the configuration file for Rubocop
  "ruby.rubocop.configFilePath": "/Users/g_watanabe/ghq/github.com/ga-tech/verdandi/.rubocop.yml",

  // execution path of rubocop.
  "ruby.rubocop.executePath": "/Users/g_watanabe/.rbenv/shims/",
  "gitlens.views.searchAndCompare.files.layout": "list",
  "gitlens.views.searchAndCompare.avatars": false,
  "workbench.editorAssociations": {
    "git-rebase-todo": "default"
  },
  "window.zoomLevel": -1
}
